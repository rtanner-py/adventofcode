from tqdm import tqdm
from itertools import groupby
#test = "2333133121414131402"
with open("input.txt") as f:
   test = f.read().strip()
output = []
file_id = 0

for i in range(len(test)):
    if i % 2 == 0:
        output.extend([str(file_id)] * int(test[i]))
        file_id += 1
    else:
        output.extend(list("." * int(test[i])))


def sort_part_1(output):
    left = 0
    right = len(output) - 1
    while left < right:
        while left < right and output[left] != '.':
            left += 1
        while left < right and output[right] == ".":
            right -= 1
        if left < right:
            output[left], output[right] = output[right], output[left]
            left += 1
            right -= 1
    return output

def sort_part_2(output):
    groups = ["".join(g) for _,g in groupby(output)]
    left = 0
    right = len(groups)-1
    
    while left < right and groups[left].isdigit():
        left += 1
    while left < right and set(groups[right]) == {"."}:
        right -= 1
    if left < right:
        if len(groups[left]) >= len(groups[right]):
            num_dots = len(groups[left]) - len(groups[right])
            groups[left], groups[right] = groups[right], groups[left]
            if num_dots > 0:
                groups[left] += "." * num_dots
                left += 1
                right -= 1
    return "".join(groups)            

def part_2(output):
# DOESNT WORK #
    steps = ["".join(output)]
    file_positions = {}
    groups = ["".join(g) for _,g in groupby(output)]
    
    for i,group in enumerate(groups):
        if group and group[0].isdigit():
            file_positions[int(group[0])] = i
    
    file_ids = sorted(file_positions.keys(), key= lambda x: file_positions[x], reverse=True)
    current = output
    for file_id in file_ids:
        groups = ["".join(g) for _,g in groupby(current)]
        file_group_index = None
        file_group_len = 0 
        for i in range(len(groups) -1, -1, -1):
            group = groups[i]
            if group and group[0] == str(file_id):
                file_group_index = i
                file_group_len = len(group)
                break
        
        if file_group_index is None:
            continue   
    
        target_index = None
        for i in range(file_group_index):
            if set(groups[i]) == {"."} and len(groups[i]) >= file_group_len:
                target_index = i
                break
        
        if target_index is not None:
            excess_dots = len(groups[target_index]) - file_group_len
            groups[target_index] = groups[file_group_index]
            groups[file_group_index] = "." * file_group_len
            if excess_dots > 0:
                groups.insert(target_index + 1, "." * excess_dots)
            current = "".join(groups)
            steps.append(current)
    
    return steps
    
    
    
def summation(output):
    sum = 0 
    for index, value in enumerate(output):
        if value != ".":
            sum += index * int(value)
    return sum


steps = part_2("".join(output))
for i,step in enumerate(steps):
    print(f"step {i}: {step}")

last_step = steps[-1]
print(last_step)
print(summation(last_step))

# print(f"Part 1: {summation(sort_part_1(output))}")
#print(f"Part 2 (sorted): {sort_part_2(output)}")
